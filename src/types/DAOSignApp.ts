/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";

export type ProofOfAgreementStruct = {
  authorityCID: string;
  signatureCIDs: string[];
  app: string;
  timestamp: BigNumberish;
  metadata: string;
};

export type ProofOfAgreementStructOutput = [authorityCID: string, signatureCIDs: string[], app: string, timestamp: bigint, metadata: string] & {
  authorityCID: string;
  signatureCIDs: string[];
  app: string;
  timestamp: bigint;
  metadata: string;
};

export type SignedProofOfAgreementStruct = {
  message: ProofOfAgreementStruct;
  proofCID: string;
};

export type SignedProofOfAgreementStructOutput = [message: ProofOfAgreementStructOutput, proofCID: string] & { message: ProofOfAgreementStructOutput; proofCID: string };

export type SignerStruct = { addr: AddressLike; metadata: string };

export type SignerStructOutput = [addr: string, metadata: string] & {
  addr: string;
  metadata: string;
};

export type ProofOfAuthorityStruct = {
  name: string;
  from: AddressLike;
  agreementCID: string;
  signers: SignerStruct[];
  app: string;
  timestamp: BigNumberish;
  metadata: string;
};

export type ProofOfAuthorityStructOutput = [name: string, from: string, agreementCID: string, signers: SignerStructOutput[], app: string, timestamp: bigint, metadata: string] & {
  name: string;
  from: string;
  agreementCID: string;
  signers: SignerStructOutput[];
  app: string;
  timestamp: bigint;
  metadata: string;
};

export type SignedProofOfAuthorityStruct = {
  message: ProofOfAuthorityStruct;
  signature: BytesLike;
  proofCID: string;
};

export type SignedProofOfAuthorityStructOutput = [message: ProofOfAuthorityStructOutput, signature: string, proofCID: string] & {
  message: ProofOfAuthorityStructOutput;
  signature: string;
  proofCID: string;
};

export type ProofOfCancelStruct = {
  authorityCIDs: string[];
  app: string;
  timestamp: BigNumberish;
  metadata: string;
};

export type ProofOfCancelStructOutput = [authorityCIDs: string[], app: string, timestamp: bigint, metadata: string] & {
  authorityCIDs: string[];
  app: string;
  timestamp: bigint;
  metadata: string;
};

export type SignedProofOfCancelStruct = {
  message: ProofOfCancelStruct;
  signature: BytesLike;
  proofCID: string;
};

export type SignedProofOfCancelStructOutput = [message: ProofOfCancelStructOutput, signature: string, proofCID: string] & {
  message: ProofOfCancelStructOutput;
  signature: string;
  proofCID: string;
};

export type ProofOfSignatureStruct = {
  name: string;
  signer: AddressLike;
  authorityCID: string;
  app: string;
  timestamp: BigNumberish;
  metadata: string;
};

export type ProofOfSignatureStructOutput = [name: string, signer: string, authorityCID: string, app: string, timestamp: bigint, metadata: string] & {
  name: string;
  signer: string;
  authorityCID: string;
  app: string;
  timestamp: bigint;
  metadata: string;
};

export type SignedProofOfSignatureStruct = {
  message: ProofOfSignatureStruct;
  signature: BytesLike;
  proofCID: string;
};

export type SignedProofOfSignatureStructOutput = [message: ProofOfSignatureStructOutput, signature: string, proofCID: string] & {
  message: ProofOfSignatureStructOutput;
  signature: string;
  proofCID: string;
};

export type ProofOfVoidStruct = {
  authorityCID: string;
  app: string;
  timestamp: BigNumberish;
  metadata: string;
};

export type ProofOfVoidStructOutput = [authorityCID: string, app: string, timestamp: bigint, metadata: string] & {
  authorityCID: string;
  app: string;
  timestamp: bigint;
  metadata: string;
};

export type SignedProofOfVoidStruct = {
  message: ProofOfVoidStruct;
  signature: BytesLike;
  proofCID: string;
};

export type SignedProofOfVoidStructOutput = [message: ProofOfVoidStructOutput, signature: string, proofCID: string] & {
  message: ProofOfVoidStructOutput;
  signature: string;
  proofCID: string;
};

export type EIP712PropertyTypeStruct = { name: string; type: string };

export type EIP712PropertyTypeStructOutput = [name: string, type_: string] & {
  name: string;
  type: string;
};

export type EIP712ProofOfAgreementTypesStruct = {
  EIP712Domain: [EIP712PropertyTypeStruct, EIP712PropertyTypeStruct];
  ProofOfAgreement: [EIP712PropertyTypeStruct, EIP712PropertyTypeStruct, EIP712PropertyTypeStruct, EIP712PropertyTypeStruct, EIP712PropertyTypeStruct];
};

export type EIP712ProofOfAgreementTypesStructOutput = [
  EIP712Domain: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput],
  ProofOfAgreement: [
    EIP712PropertyTypeStructOutput,
    EIP712PropertyTypeStructOutput,
    EIP712PropertyTypeStructOutput,
    EIP712PropertyTypeStructOutput,
    EIP712PropertyTypeStructOutput,
  ],
] & {
  EIP712Domain: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput];
  ProofOfAgreement: [
    EIP712PropertyTypeStructOutput,
    EIP712PropertyTypeStructOutput,
    EIP712PropertyTypeStructOutput,
    EIP712PropertyTypeStructOutput,
    EIP712PropertyTypeStructOutput,
  ];
};

export type EIP712DomainStruct = {
  name: string;
  version: string;
  chainId: BigNumberish;
  verifyingContract: AddressLike;
};

export type EIP712DomainStructOutput = [name: string, version: string, chainId: bigint, verifyingContract: string] & {
  name: string;
  version: string;
  chainId: bigint;
  verifyingContract: string;
};

export type EIP712ProofOfAgreementDocumentStruct = {
  types: EIP712ProofOfAgreementTypesStruct;
  domain: EIP712DomainStruct;
  primaryType: string;
  message: ProofOfAgreementStruct;
};

export type EIP712ProofOfAgreementDocumentStructOutput = [
  types: EIP712ProofOfAgreementTypesStructOutput,
  domain: EIP712DomainStructOutput,
  primaryType: string,
  message: ProofOfAgreementStructOutput,
] & {
  types: EIP712ProofOfAgreementTypesStructOutput;
  domain: EIP712DomainStructOutput;
  primaryType: string;
  message: ProofOfAgreementStructOutput;
};

export type SignedProofOfAgreementMsgStruct = {
  message: EIP712ProofOfAgreementDocumentStruct;
};

export type SignedProofOfAgreementMsgStructOutput = [message: EIP712ProofOfAgreementDocumentStructOutput] & { message: EIP712ProofOfAgreementDocumentStructOutput };

export type EIP712ProofOfAuthorityTypesStruct = {
  EIP712Domain: [EIP712PropertyTypeStruct, EIP712PropertyTypeStruct];
  Signer: [EIP712PropertyTypeStruct, EIP712PropertyTypeStruct];
  ProofOfAuthority: EIP712PropertyTypeStruct[];
};

export type EIP712ProofOfAuthorityTypesStructOutput = [
  EIP712Domain: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput],
  Signer: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput],
  ProofOfAuthority: EIP712PropertyTypeStructOutput[],
] & {
  EIP712Domain: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput];
  Signer: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput];
  ProofOfAuthority: EIP712PropertyTypeStructOutput[];
};

export type EIP712ProofOfAuthorityDocumentStruct = {
  types: EIP712ProofOfAuthorityTypesStruct;
  domain: EIP712DomainStruct;
  primaryType: string;
  message: ProofOfAuthorityStruct;
};

export type EIP712ProofOfAuthorityDocumentStructOutput = [
  types: EIP712ProofOfAuthorityTypesStructOutput,
  domain: EIP712DomainStructOutput,
  primaryType: string,
  message: ProofOfAuthorityStructOutput,
] & {
  types: EIP712ProofOfAuthorityTypesStructOutput;
  domain: EIP712DomainStructOutput;
  primaryType: string;
  message: ProofOfAuthorityStructOutput;
};

export type SignedProofOfAuthorityMsgStruct = {
  message: EIP712ProofOfAuthorityDocumentStruct;
  signature: BytesLike;
};

export type SignedProofOfAuthorityMsgStructOutput = [message: EIP712ProofOfAuthorityDocumentStructOutput, signature: string] & {
  message: EIP712ProofOfAuthorityDocumentStructOutput;
  signature: string;
};

export type EIP712ProofOfCancelTypesStruct = {
  EIP712Domain: [EIP712PropertyTypeStruct, EIP712PropertyTypeStruct];
  ProofOfVoid: [EIP712PropertyTypeStruct, EIP712PropertyTypeStruct, EIP712PropertyTypeStruct, EIP712PropertyTypeStruct];
};

export type EIP712ProofOfCancelTypesStructOutput = [
  EIP712Domain: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput],
  ProofOfVoid: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput],
] & {
  EIP712Domain: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput];
  ProofOfVoid: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput];
};

export type EIP712ProofOfCancelDocumentStruct = {
  types: EIP712ProofOfCancelTypesStruct;
  domain: EIP712DomainStruct;
  primaryType: string;
  message: ProofOfCancelStruct;
};

export type EIP712ProofOfCancelDocumentStructOutput = [
  types: EIP712ProofOfCancelTypesStructOutput,
  domain: EIP712DomainStructOutput,
  primaryType: string,
  message: ProofOfCancelStructOutput,
] & {
  types: EIP712ProofOfCancelTypesStructOutput;
  domain: EIP712DomainStructOutput;
  primaryType: string;
  message: ProofOfCancelStructOutput;
};

export type SignedProofOfCancelMsgStruct = {
  message: EIP712ProofOfCancelDocumentStruct;
  signature: BytesLike;
};

export type SignedProofOfCancelMsgStructOutput = [message: EIP712ProofOfCancelDocumentStructOutput, signature: string] & {
  message: EIP712ProofOfCancelDocumentStructOutput;
  signature: string;
};

export type EIP712ProofOfSignatureTypesStruct = {
  EIP712Domain: [EIP712PropertyTypeStruct, EIP712PropertyTypeStruct];
  ProofOfSignature: EIP712PropertyTypeStruct[];
};

export type EIP712ProofOfSignatureTypesStructOutput = [
  EIP712Domain: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput],
  ProofOfSignature: EIP712PropertyTypeStructOutput[],
] & {
  EIP712Domain: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput];
  ProofOfSignature: EIP712PropertyTypeStructOutput[];
};

export type EIP712ProofOfSignatureDocumentStruct = {
  types: EIP712ProofOfSignatureTypesStruct;
  domain: EIP712DomainStruct;
  primaryType: string;
  message: ProofOfSignatureStruct;
};

export type EIP712ProofOfSignatureDocumentStructOutput = [
  types: EIP712ProofOfSignatureTypesStructOutput,
  domain: EIP712DomainStructOutput,
  primaryType: string,
  message: ProofOfSignatureStructOutput,
] & {
  types: EIP712ProofOfSignatureTypesStructOutput;
  domain: EIP712DomainStructOutput;
  primaryType: string;
  message: ProofOfSignatureStructOutput;
};

export type SignedProofOfSignatureMsgStruct = {
  message: EIP712ProofOfSignatureDocumentStruct;
  signature: BytesLike;
};

export type SignedProofOfSignatureMsgStructOutput = [message: EIP712ProofOfSignatureDocumentStructOutput, signature: string] & {
  message: EIP712ProofOfSignatureDocumentStructOutput;
  signature: string;
};

export type EIP712ProofOfVoidTypesStruct = {
  EIP712Domain: [EIP712PropertyTypeStruct, EIP712PropertyTypeStruct];
  ProofOfVoid: [EIP712PropertyTypeStruct, EIP712PropertyTypeStruct, EIP712PropertyTypeStruct, EIP712PropertyTypeStruct];
};

export type EIP712ProofOfVoidTypesStructOutput = [
  EIP712Domain: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput],
  ProofOfVoid: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput],
] & {
  EIP712Domain: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput];
  ProofOfVoid: [EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput, EIP712PropertyTypeStructOutput];
};

export type EIP712ProofOfVoidDocumentStruct = {
  types: EIP712ProofOfVoidTypesStruct;
  domain: EIP712DomainStruct;
  primaryType: string;
  message: ProofOfVoidStruct;
};

export type EIP712ProofOfVoidDocumentStructOutput = [
  types: EIP712ProofOfVoidTypesStructOutput,
  domain: EIP712DomainStructOutput,
  primaryType: string,
  message: ProofOfVoidStructOutput,
] & {
  types: EIP712ProofOfVoidTypesStructOutput;
  domain: EIP712DomainStructOutput;
  primaryType: string;
  message: ProofOfVoidStructOutput;
};

export type SignedProofOfVoidMsgStruct = {
  message: EIP712ProofOfVoidDocumentStruct;
  signature: BytesLike;
};

export type SignedProofOfVoidMsgStructOutput = [message: EIP712ProofOfVoidDocumentStructOutput, signature: string] & {
  message: EIP712ProofOfVoidDocumentStructOutput;
  signature: string;
};

export interface DAOSignAppInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getProofOfAgreement"
      | "getProofOfAuthority"
      | "getProofOfCancel"
      | "getProofOfSignature"
      | "getProofOfVoid"
      | "storeProofOfAgreement"
      | "storeProofOfAuthority"
      | "storeProofOfCancel"
      | "storeProofOfSignature"
      | "storeProofOfVoid",
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewProofOfAgreement" | "NewProofOfAuthority" | "NewProofOfCancel" | "NewProofOfSignature" | "NewProofOfVoid"): EventFragment;

  encodeFunctionData(functionFragment: "getProofOfAgreement", values: [string]): string;
  encodeFunctionData(functionFragment: "getProofOfAuthority", values: [string]): string;
  encodeFunctionData(functionFragment: "getProofOfCancel", values: [string]): string;
  encodeFunctionData(functionFragment: "getProofOfSignature", values: [string]): string;
  encodeFunctionData(functionFragment: "getProofOfVoid", values: [string]): string;
  encodeFunctionData(functionFragment: "storeProofOfAgreement", values: [SignedProofOfAgreementStruct]): string;
  encodeFunctionData(functionFragment: "storeProofOfAuthority", values: [SignedProofOfAuthorityStruct]): string;
  encodeFunctionData(functionFragment: "storeProofOfCancel", values: [SignedProofOfCancelStruct]): string;
  encodeFunctionData(functionFragment: "storeProofOfSignature", values: [SignedProofOfSignatureStruct]): string;
  encodeFunctionData(functionFragment: "storeProofOfVoid", values: [SignedProofOfVoidStruct]): string;

  decodeFunctionResult(functionFragment: "getProofOfAgreement", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProofOfAuthority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProofOfCancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProofOfSignature", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProofOfVoid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storeProofOfAgreement", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storeProofOfAuthority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storeProofOfCancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storeProofOfSignature", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storeProofOfVoid", data: BytesLike): Result;
}

export namespace NewProofOfAgreementEvent {
  export type InputTuple = [data: SignedProofOfAgreementStruct];
  export type OutputTuple = [data: SignedProofOfAgreementStructOutput];
  export interface OutputObject {
    data: SignedProofOfAgreementStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewProofOfAuthorityEvent {
  export type InputTuple = [data: SignedProofOfAuthorityStruct];
  export type OutputTuple = [data: SignedProofOfAuthorityStructOutput];
  export interface OutputObject {
    data: SignedProofOfAuthorityStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewProofOfCancelEvent {
  export type InputTuple = [data: SignedProofOfCancelStruct];
  export type OutputTuple = [data: SignedProofOfCancelStructOutput];
  export interface OutputObject {
    data: SignedProofOfCancelStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewProofOfSignatureEvent {
  export type InputTuple = [data: SignedProofOfSignatureStruct];
  export type OutputTuple = [data: SignedProofOfSignatureStructOutput];
  export interface OutputObject {
    data: SignedProofOfSignatureStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewProofOfVoidEvent {
  export type InputTuple = [data: SignedProofOfVoidStruct];
  export type OutputTuple = [data: SignedProofOfVoidStructOutput];
  export interface OutputObject {
    data: SignedProofOfVoidStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DAOSignApp extends BaseContract {
  connect(runner?: ContractRunner | null): DAOSignApp;
  waitForDeployment(): Promise<this>;

  interface: DAOSignAppInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  getProofOfAgreement: TypedContractMethod<[cid: string], [SignedProofOfAgreementMsgStructOutput], "view">;

  getProofOfAuthority: TypedContractMethod<[cid: string], [SignedProofOfAuthorityMsgStructOutput], "view">;

  getProofOfCancel: TypedContractMethod<[cid: string], [SignedProofOfCancelMsgStructOutput], "view">;

  getProofOfSignature: TypedContractMethod<[cid: string], [SignedProofOfSignatureMsgStructOutput], "view">;

  getProofOfVoid: TypedContractMethod<[cid: string], [SignedProofOfVoidMsgStructOutput], "view">;

  storeProofOfAgreement: TypedContractMethod<[data: SignedProofOfAgreementStruct], [void], "nonpayable">;

  storeProofOfAuthority: TypedContractMethod<[data: SignedProofOfAuthorityStruct], [void], "nonpayable">;

  storeProofOfCancel: TypedContractMethod<[data: SignedProofOfCancelStruct], [void], "nonpayable">;

  storeProofOfSignature: TypedContractMethod<[data: SignedProofOfSignatureStruct], [void], "nonpayable">;

  storeProofOfVoid: TypedContractMethod<[data: SignedProofOfVoidStruct], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "getProofOfAgreement"): TypedContractMethod<[cid: string], [SignedProofOfAgreementMsgStructOutput], "view">;
  getFunction(nameOrSignature: "getProofOfAuthority"): TypedContractMethod<[cid: string], [SignedProofOfAuthorityMsgStructOutput], "view">;
  getFunction(nameOrSignature: "getProofOfCancel"): TypedContractMethod<[cid: string], [SignedProofOfCancelMsgStructOutput], "view">;
  getFunction(nameOrSignature: "getProofOfSignature"): TypedContractMethod<[cid: string], [SignedProofOfSignatureMsgStructOutput], "view">;
  getFunction(nameOrSignature: "getProofOfVoid"): TypedContractMethod<[cid: string], [SignedProofOfVoidMsgStructOutput], "view">;
  getFunction(nameOrSignature: "storeProofOfAgreement"): TypedContractMethod<[data: SignedProofOfAgreementStruct], [void], "nonpayable">;
  getFunction(nameOrSignature: "storeProofOfAuthority"): TypedContractMethod<[data: SignedProofOfAuthorityStruct], [void], "nonpayable">;
  getFunction(nameOrSignature: "storeProofOfCancel"): TypedContractMethod<[data: SignedProofOfCancelStruct], [void], "nonpayable">;
  getFunction(nameOrSignature: "storeProofOfSignature"): TypedContractMethod<[data: SignedProofOfSignatureStruct], [void], "nonpayable">;
  getFunction(nameOrSignature: "storeProofOfVoid"): TypedContractMethod<[data: SignedProofOfVoidStruct], [void], "nonpayable">;

  getEvent(key: "NewProofOfAgreement"): TypedContractEvent<NewProofOfAgreementEvent.InputTuple, NewProofOfAgreementEvent.OutputTuple, NewProofOfAgreementEvent.OutputObject>;
  getEvent(key: "NewProofOfAuthority"): TypedContractEvent<NewProofOfAuthorityEvent.InputTuple, NewProofOfAuthorityEvent.OutputTuple, NewProofOfAuthorityEvent.OutputObject>;
  getEvent(key: "NewProofOfCancel"): TypedContractEvent<NewProofOfCancelEvent.InputTuple, NewProofOfCancelEvent.OutputTuple, NewProofOfCancelEvent.OutputObject>;
  getEvent(key: "NewProofOfSignature"): TypedContractEvent<NewProofOfSignatureEvent.InputTuple, NewProofOfSignatureEvent.OutputTuple, NewProofOfSignatureEvent.OutputObject>;
  getEvent(key: "NewProofOfVoid"): TypedContractEvent<NewProofOfVoidEvent.InputTuple, NewProofOfVoidEvent.OutputTuple, NewProofOfVoidEvent.OutputObject>;

  filters: {
    "NewProofOfAgreement(tuple)": TypedContractEvent<NewProofOfAgreementEvent.InputTuple, NewProofOfAgreementEvent.OutputTuple, NewProofOfAgreementEvent.OutputObject>;
    NewProofOfAgreement: TypedContractEvent<NewProofOfAgreementEvent.InputTuple, NewProofOfAgreementEvent.OutputTuple, NewProofOfAgreementEvent.OutputObject>;

    "NewProofOfAuthority(tuple)": TypedContractEvent<NewProofOfAuthorityEvent.InputTuple, NewProofOfAuthorityEvent.OutputTuple, NewProofOfAuthorityEvent.OutputObject>;
    NewProofOfAuthority: TypedContractEvent<NewProofOfAuthorityEvent.InputTuple, NewProofOfAuthorityEvent.OutputTuple, NewProofOfAuthorityEvent.OutputObject>;

    "NewProofOfCancel(tuple)": TypedContractEvent<NewProofOfCancelEvent.InputTuple, NewProofOfCancelEvent.OutputTuple, NewProofOfCancelEvent.OutputObject>;
    NewProofOfCancel: TypedContractEvent<NewProofOfCancelEvent.InputTuple, NewProofOfCancelEvent.OutputTuple, NewProofOfCancelEvent.OutputObject>;

    "NewProofOfSignature(tuple)": TypedContractEvent<NewProofOfSignatureEvent.InputTuple, NewProofOfSignatureEvent.OutputTuple, NewProofOfSignatureEvent.OutputObject>;
    NewProofOfSignature: TypedContractEvent<NewProofOfSignatureEvent.InputTuple, NewProofOfSignatureEvent.OutputTuple, NewProofOfSignatureEvent.OutputObject>;

    "NewProofOfVoid(tuple)": TypedContractEvent<NewProofOfVoidEvent.InputTuple, NewProofOfVoidEvent.OutputTuple, NewProofOfVoidEvent.OutputObject>;
    NewProofOfVoid: TypedContractEvent<NewProofOfVoidEvent.InputTuple, NewProofOfVoidEvent.OutputTuple, NewProofOfVoidEvent.OutputObject>;
  };
}
